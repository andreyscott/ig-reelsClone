{"version":3,"sources":["VideoHeader.js","VideoFooter.js","VideoCard.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoHeader","className","VideoFooter","likes","shares","channel","avaterSrc","song","src","Button","mode","index","fontSize","VideoCard","url","useState","isVideoPlaying","setIsVideoPlaying","videoRef","useRef","ref","onClick","current","pause","play","alt","loop","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","avatarSrc","url1","url2","url3","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dcfc5f01.chunk.js","sourcesContent":["import React from 'react';\r\nimport './VideoHeader.css';\r\n// import { AccessAlarm, ThreeDRotation } from '@material-ui/icons';\r\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\nfunction VideoHeader() {\r\n\treturn (\r\n\t\t<div className='videoHeader'>\r\n\t\t<ArrowBackIcon />\r\n\t\t<h3> Reels </h3>\r\n\t\t<CameraAltIcon />\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default VideoHeader;","import React from 'react';\r\nimport './VideoFooter.css';\r\nimport { Button, } from '@material-ui/core';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\nimport Ticker from \"react-ticker\";\r\n\r\n\r\nfunction VideoFooter ({  likes, shares, channel, avaterSrc, song }) {\r\n\treturn (\r\n\t\t<div className='videoFooter'>\r\n\r\n\t\t<div className='videoFooter_text'>\r\n\r\n     <AccountCircleIcon src={avaterSrc} />\r\n     <h3>\r\n     {channel} <Button>follow me </Button>\r\n\r\n     </h3></div>\r\n\r\n       <div className=\"videoFooter_ticker\">\r\n\t\t<MusicNoteIcon className=\"videofooter_icon\" />\r\n         <Ticker mode=\"smooth\">\r\n         {({ index}) => (\r\n         \t<h1> {song} </h1>\r\n\r\n         \t)}\r\n\r\n      </Ticker>\r\n\t\t</div>\r\n\t\t<div className=\"videoFooter_actions\">\r\n\t\t<div className=\"videoFooter_actionsLeft\">\r\n\t\t<FavoriteIcon fontSize=\"large\"  />\r\n\t\t<ModeCommentIcon fontSize=\"large\" />\r\n\t\t<SendIcon fontSize=\"large\" />\r\n\t\t<MoreHorizIcon fontSize=\"large\" />\r\n\r\n\r\n\t\t</div>\r\n\t\t<div className=\"videoFooter_actionsRight\">\r\n\t\t<div className=\"videoFooter_stat\">\r\n\t\t<FavoriteIcon />\r\n\t\t<p> {likes} </p>\r\n\t\t</div>\r\n\t\t<div className=\"videoFooter_stat\">\r\n\t\t<ModeCommentIcon />\r\n\t\t<p>{shares} </p>\r\n\t\t</div>\r\n\r\n        </div>\r\n\r\n\t\t</div>\r\n\r\n\r\n\r\n\t\t</div>\t \r\n\t\t)\r\n}\r\n\r\n\r\n\r\nexport default VideoFooter;","import React, { useState, useRef} from 'react';\r\nimport VideoHeader from './VideoHeader';\r\nimport VideoFooter from './VideoFooter';\r\nimport './VideoCard.css';\r\n\r\nfunction VideoCard({url, likes, shares, channel, avaterSrc, song }) {\r\n\r\n\tconst [isVideoPlaying, setIsVideoPlaying] = useState(false);\r\n\r\n  const videoRef = useRef(null);\r\n\r\n  const onVideoPress = () => {\r\n   if (isVideoPlaying) {\r\n        //stop\r\n     videoRef.current.pause();\r\n     setIsVideoPlaying(false)\r\n   } else {\r\n    // play\r\n    videoRef.current.play();\r\n    setIsVideoPlaying(true)\r\n    }\r\n  }\r\n\r\n\treturn (\r\n\t\t<div className=\"videoCard\">\r\n\t\t<VideoHeader />\r\n\t\t<video \r\n\t\tref={videoRef}\r\n\t\tonClick={onVideoPress}\r\n        className=\"videoCard_player\"\r\n\t\tsrc={url}\r\n\t\t// type=\"video/mp4\"\r\n\t\talt='IG reel video'\r\n\t\tloop\r\n\t\t>\r\n\t\t</video>\r\n\r\n\t\t<VideoFooter \r\n\t\tchannel={channel}\r\n\t\tlikes={likes}\r\n\t\tshares={shares}\r\n\t\tavaterSrc={avaterSrc}\r\n\t\tsong={song}\r\n\r\n\t\t/>\r\n\r\n\t\t</div>\r\n\t\t)\r\n}\r\n\r\nexport default VideoCard; ","// For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\nimport firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAtssMlCRcSSlSt-NKIEinnayT6RVq-aQw\",\r\n  authDomain: \"ig-reels-ec778.firebaseapp.com\",\r\n  databaseURL: \"https://ig-reels-ec778.firebaseio.com\",\r\n  projectId: \"ig-reels-ec778\",\r\n  storageBucket: \"ig-reels-ec778.appspot.com\",\r\n  messagingSenderId: \"376902603411\",\r\n  appId: \"1:376902603411:web:1b9a029d83c3f8a544f366\",\r\n  measurementId: \"G-6VFVW0G899\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp\r\n(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\n\r\n\r\nexport default db;","import React, { useState, useEffect } from 'react';\nimport'./App.css';\nimport VideoCard from './VideoCard';\nimport db from './firebase';\n\nfunction App() {\n\nconst [reels, setReels] = useState([]);\n\nuseEffect(() => {\n  //app component will run once when it loads\n  db.collection('reels').onSnapshot(snapshot => {\n    setReels(snapshot.docs.map(doc => doc.data()))\n  })\n}, [])\n\n  return (\n    <div className=\"app\">\n    \n    <div className=\"app_top\">\n  {/* image at the top*/}\n  <img className=\"app_logo\"\n  src=\"https://s3.amazonaws.com/freebiesupply/large/2x/instagram-logo-white-on-black.png\"\n  alt=\"\"\n  />\n  <h1> Reels </h1>\n   </div>\n\n    <div className=\"app_videos\">\n  { /* scrollable video container*/ }\n  {reels.map(({channel, avatarSrc, song, likes, shares, url }) => ( \n\n  <VideoCard \n  channel={channel}\n  avatarSrc={ avatarSrc }\n  song= {song}\n  url={url}\n  likes={likes}\n  shares={shares}\n  />\n\n))}\n\n  {reels.map(({channel, avatarSrc, song, likes, shares, url1 }) => ( \n  \n  <VideoCard \n  channel={channel}\n  avatarSrc={ avatarSrc }\n  song= {song}\n  url={url1}\n  likes={likes}\n  shares={shares}\n  />\n))}\n\n  {reels.map(({channel, avatarSrc, song, likes, shares, url2 }) => ( \n  \n  <VideoCard \n  channel={channel}\n  avatarSrc={ avatarSrc }\n  song= {song}\n  url={url2}\n  likes={likes}\n  shares={shares}\n  />\n))}\n\n  {reels.map(({channel, avatarSrc, song, likes, shares, url3 }) => ( \n  \n  <VideoCard \n  channel={channel}\n  avatarSrc={ avatarSrc }\n  song= {song}\n  url={url3}\n  likes={likes}\n  shares={shares}\n  />\n))}\n\n\n\n\n\n  </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n// <!-- The core Firebase JS SDK is always required and must be listed first -->\n// <script src=\"/__/firebase/7.20.0/firebase-app.js\"></script>\n\n// <!-- TODO: Add SDKs for Firebase products that you want to use\n//      https://firebase.google.com/docs/web/setup#available-libraries -->\n// <script src=\"/__/firebase/7.20.0/firebase-analytics.js\"></script>\n\n// <!-- Initialize Firebase -->\n// <script src=\"/__/firebase/init.js\"></script>\n\nserviceWorker.unregister();\n"],"sourceRoot":""}